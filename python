# names of hurricanes
names = ['Cuba I', 'San Felipe II Okeechobee', 'Bahamas', 'Cuba II', 'CubaBrownsville', 'Tampico', 'Labor Day', 'New England', 'Carol', 'Janet', 'Carla', 'Hattie', 'Beulah', 'Camille', 'Edith', 'Anita', 'David', 'Allen', 'Gilbert', 'Hugo', 'Andrew', 'Mitch', 'Isabel', 'Ivan', 'Emily', 'Katrina', 'Rita', 'Wilma', 'Dean', 'Felix', 'Matthew', 'Irma', 'Maria', 'Michael']

# months of hurricanes
months = ['October', 'September', 'September', 'November', 'August', 'September', 'September', 'September', 'September', 'September', 'September', 'October', 'September', 'August', 'September', 'September', 'August', 'August', 'September', 'September', 'August', 'October', 'September', 'September', 'July', 'August', 'September', 'October', 'August', 'September', 'October', 'September', 'September', 'October']

# years of hurricanes
years = [1924, 1928, 1932, 1932, 1933, 1933, 1935, 1938, 1953, 1955, 1961, 1961, 1967, 1969, 1971, 1977, 1979, 1980, 1988, 1989, 1992, 1998, 2003, 2004, 2005, 2005, 2005, 2005, 2007, 2007, 2016, 2017, 2017, 2018]

# maximum sustained winds (mph) of hurricanes
max_sustained_winds = [165, 160, 160, 175, 160, 160, 185, 160, 160, 175, 175, 160, 160, 175, 160, 175, 175, 190, 185, 160, 175, 180, 165, 165, 160, 175, 180, 185, 175, 175, 165, 180, 175, 160]

# areas affected by each hurricane
areas_affected = [['Central America', 'Mexico', 'Cuba', 'Florida', 'The Bahamas'], ['Lesser Antilles', 'The Bahamas', 'United States East Coast', 'Atlantic Canada'], ['The Bahamas', 'Northeastern United States'], ['Lesser Antilles', 'Jamaica', 'Cayman Islands', 'Cuba', 'The Bahamas', 'Bermuda'], ['The Bahamas', 'Cuba', 'Florida', 'Texas', 'Tamaulipas'], ['Jamaica', 'Yucatn Peninsula'], ['The Bahamas', 'Florida', 'Georgia', 'The Carolinas', 'Virginia'], ['Southeastern United States', 'Northeastern United States', 'Southwestern Quebec'], ['Bermuda', 'New England', 'Atlantic Canada'], ['Lesser Antilles', 'Central America'], ['Texas', 'Louisiana', 'Midwestern United States'], ['Central America'], ['The Caribbean', 'Mexico', 'Texas'], ['Cuba', 'United States Gulf Coast'], ['The Caribbean', 'Central America', 'Mexico', 'United States Gulf Coast'], ['Mexico'], ['The Caribbean', 'United States East coast'], ['The Caribbean', 'Yucatn Peninsula', 'Mexico', 'South Texas'], ['Jamaica', 'Venezuela', 'Central America', 'Hispaniola', 'Mexico'], ['The Caribbean', 'United States East Coast'], ['The Bahamas', 'Florida', 'United States Gulf Coast'], ['Central America', 'Yucatn Peninsula', 'South Florida'], ['Greater Antilles', 'Bahamas', 'Eastern United States', 'Ontario'], ['The Caribbean', 'Venezuela', 'United States Gulf Coast'], ['Windward Islands', 'Jamaica', 'Mexico', 'Texas'], ['Bahamas', 'United States Gulf Coast'], ['Cuba', 'United States Gulf Coast'], ['Greater Antilles', 'Central America', 'Florida'], ['The Caribbean', 'Central America'], ['Nicaragua', 'Honduras'], ['Antilles', 'Venezuela', 'Colombia', 'United States East Coast', 'Atlantic Canada'], ['Cape Verde', 'The Caribbean', 'British Virgin Islands', 'U.S. Virgin Islands', 'Cuba', 'Florida'], ['Lesser Antilles', 'Virgin Islands', 'Puerto Rico', 'Dominican Republic', 'Turks and Caicos Islands'], ['Central America', 'United States Gulf Coast (especially Florida Panhandle)']]

# damages (USD($)) of hurricanes
damages = ['Damages not recorded', '100M', 'Damages not recorded', '40M', '27.9M', '5M', 'Damages not recorded', '306M', '2M', '65.8M', '326M', '60.3M', '208M', '1.42B', '25.4M', 'Damages not recorded', '1.54B', '1.24B', '7.1B', '10B', '26.5B', '6.2B', '5.37B', '23.3B', '1.01B', '125B', '12B', '29.4B', '1.76B', '720M', '15.1B', '64.8B', '91.6B', '25.1B']

# deaths for each hurricane
deaths = [90,4000,16,3103,179,184,408,682,5,1023,43,319,688,259,37,11,2068,269,318,107,65,19325,51,124,17,1836,125,87,45,133,603,138,3057,74]

# 1
# Update Recorded Damages
conversion = {"M": 1000000,
              "B": 1000000000}

# test function by updating damages
def convert_damages(damages):
    updated_damages = []
    for damage in damages:
        if damage == "Damages not recorded":
            updated_damages.append(damage)
        else:
            # Extract the numeric part and the suffix (B or M)
            value_str = damage[:-1]
            suffix = damage[-1]
            # Check if the suffix is in the conversion dictionary
            if suffix in conversion:
                value = float(value_str) * conversion[suffix]
                updated_damages.append(value)
            else:
                # If the suffix is not recognized, retain the original string
                updated_damages.append(damage)

    return updated_damages

# Test the function with your data
updated_damages = convert_damages(damages)
print(updated_damages)

# 2 
# Create a Table
def create_hurricane_dictionary(names, months, years, max_sustained_winds, areas_affected, damages, deaths):
    hurricane_data = {}  # Initialize an empty dictionary to store hurricane data
    for i in range(len(names)):
        hurricane_name = names[i]
        hurricane_month = months[i]
        hurricane_year = years[i]
        max_wind = max_sustained_winds[i]
        affected_areas = areas_affected[i]
        damage = damages[i]
        death = deaths[i]

        # Create a dictionary for each hurricane
        hurricane_info = {
            'Name': hurricane_name,
            'Month': hurricane_month,
            'Year': hurricane_year,
            'Max Sustained Wind': max_wind,
            'Areas Affected': affected_areas,
            'Damage': damage,
            'Deaths': death
        }

        # Add the hurricane data to the main dictionary with the hurricane name as the key
        hurricane_data[hurricane_name] = hurricane_info

    return hurricane_data

# Test the function with your data
hurricane_dictionary = create_hurricane_dictionary(names, months, years, max_sustained_winds, areas_affected, updated_damages, deaths)

# Example: Access data for the "Cuba I" hurricane
print(hurricane_dictionary["Cuba I"])
# Create and view the hurricanes dictionary

# 3
# Organizing by Year
def organize_hurricanes_by_year(hurricane_data):
    hurricanes_by_year = {}  # Initialize a dictionary to store hurricanes by year

    for hurricane_info in hurricane_data.values():
        year = hurricane_info['Year']

        # Create a dictionary for the current hurricane
        current_hurricane = {
            'Name': hurricane_info['Name'],
            'Month': hurricane_info['Month'],
            'Year': hurricane_info['Year'],
            'Max Sustained Wind': hurricane_info['Max Sustained Wind'],
            'Areas Affected': hurricane_info['Areas Affected'],
            'Damage': hurricane_info['Damage'],
            'Deaths': hurricane_info['Deaths']
        }

        # Check if the year already exists in the new dictionary
        if year in hurricanes_by_year:
            hurricanes_by_year[year].append(current_hurricane)
        else:
            hurricanes_by_year[year] = [current_hurricane]

    return hurricanes_by_year

# Test the function with your hurricane data dictionary
hurricanes_by_year = organize_hurricanes_by_year(hurricane_dictionary)

# Example: Access data for hurricanes that occurred in the year 1932
print(hurricanes_by_year[1932])
# create a new dictionary of hurricanes with year and key


# 4
# Counting Damaged Areas
def count_affected_areas(hurricane_data):
    affected_area_counts = {}  # Initialize a dictionary to store area counts

    for hurricane_info in hurricane_data.values():
        affected_areas = hurricane_info['Areas Affected']

        for area in affected_areas:
            if area in affected_area_counts:
                affected_area_counts[area] += 1
            else:
                affected_area_counts[area] = 1

    return affected_area_counts

# Test the function with your hurricane data dictionary
area_counts = count_affected_areas(hurricane_dictionary)

# Print the counts for each affected area
for area, count in area_counts.items():
    print(f"{area}: {count} times")
# create dictionary of areas to store the number of hurricanes involved in


# 5 
# Calculating Maximum Hurricane Count
def most_affected_area(area_counts):
    most_affected = max(area_counts, key=area_counts.get)
    times_affected = area_counts[most_affected]
    return most_affected, times_affected

# Test the function with your affected area dictionary
most_affected, times_affected = most_affected_area(area_counts)
print(f"The most affected area is '{most_affected}' and it was hit {times_affected} times.")
# find most frequently affected area and the number of hurricanes involved in


# 6
# Calculating the Deadliest Hurricane
def hurricane_with_most_deaths(hurricane_data):
    max_deaths = 0
    hurricane_with_max_deaths = None

    for hurricane_info in hurricane_data.values():
        deaths = hurricane_info['Deaths']

        if deaths > max_deaths:
            max_deaths = deaths
            hurricane_with_max_deaths = hurricane_info['Name']

    return hurricane_with_max_deaths, max_deaths

# Test the function with your hurricane data dictionary
hurricane, deaths = hurricane_with_most_deaths(hurricane_dictionary)
print(f"The hurricane with the most deaths is '{hurricane}' and it caused {deaths} deaths.")
# find highest mortality hurricane and the number of deaths

# 7
# Rating Hurricanes by Mortality
def rate_hurricanes_by_mortality(hurricane_data, mortality_scale):
    rated_hurricanes = {rating: [] for rating in mortality_scale}

    for hurricane_info in hurricane_data.values():
        deaths = hurricane_info['Deaths']

        for rating, upper_bound in mortality_scale.items():
            if deaths <= upper_bound:
                rated_hurricanes[rating].append(hurricane_info)
                break

    return rated_hurricanes

# Mortality scale definition
mortality_scale = {0: 0, 1: 100, 2: 500, 3: 1000, 4: 10000}

# Test the function with your hurricane data dictionary and the mortality scale
rated_hurricanes = rate_hurricanes_by_mortality(hurricane_dictionary, mortality_scale)

# Print hurricanes in each mortality rating category
for rating, hurricanes in rated_hurricanes.items():
    print(f"Mortality Rating {rating}:")
    for hurricane in hurricanes:
        print(hurricane['Name'])
    print()

# categorize hurricanes in new dictionary with mortality severity as key


# 8 Calculating Hurricane Maximum Damage
def hurricane_with_greatest_damage(hurricane_data):
    max_damage = 0
    hurricane_with_max_damage = None

    for hurricane_info in hurricane_data.values():
        damage = hurricane_info['Damage']

        if damage != 'Damages not recorded':
            damage_value = float(damage)  # Convert damage to a float for comparison
            if damage_value > max_damage:
                max_damage = damage_value
                hurricane_with_max_damage = hurricane_info['Name']

    return hurricane_with_max_damage, max_damage

# Test the function with your hurricane data dictionary
hurricane, damage = hurricane_with_greatest_damage(hurricane_dictionary)
print(f"The hurricane with the greatest damage is '{hurricane}' and it caused ${damage:.2f} in damages.")
# find highest damage inducing hurricane and its total cost


# 9
# Rating Hurricanes by Damage
damage_scale = {0: 0,
                1: 100000000,
                2: 1000000000,
                3: 10000000000,
                4: 50000000000}
  
# categorize hurricanes in new dictionary with damage severity as key
def rate_hurricanes_by_damage(hurricane_data, damage_scale):
    rated_hurricanes = {rating: [] for rating in damage_scale}

    for hurricane_info in hurricane_data.values():
        damage = hurricane_info['Damage']

        if damage != 'Damages not recorded':
            damage_value = float(damage)  # Convert damage to a float for comparison

            for rating, upper_bound in damage_scale.items():
                if damage_value <= upper_bound:
                    rated_hurricanes[rating].append(hurricane_info)
                    break

    return rated_hurricanes

# Damage scale definition
damage_scale = {0: 0, 1: 100000000, 2: 1000000000, 3: 10000000000, 4: 50000000000}

# Test the function with your hurricane data dictionary and the damage scale
rated_hurricanes = rate_hurricanes_by_damage(hurricane_dictionary, damage_scale)

# Print hurricanes in each damage rating category
for rating, hurricanes in rated_hurricanes.items():
    print(f"Damage Rating {rating}:")
    for hurricane in hurricanes:
        print(f"{hurricane['Name']} - Damage: {hurricane['Damage']}")
    print()
